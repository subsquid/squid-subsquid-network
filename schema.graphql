enum AccountType {
  USER
  VESTING
  TEMPORARY_HOLDING
}

type Account @entity {
  id: ID!

  type: AccountType!
  balance: BigInt!

  owner: Account
  owned: [Account!]! @derivedFrom(field: "owner")

  transfers: [AccountTransfer!] @derivedFrom(field: "account")
  transfersTo: [Transfer!] @derivedFrom(field: "to")
  transfersFrom: [Transfer!] @derivedFrom(field: "from")

  workers: [Worker!] @derivedFrom(field: "realOwner")
  workers2: [Worker!] @derivedFrom(field: "owner")

  delegations: [Delegation!] @derivedFrom(field: "realOwner")
  delegations2: [Delegation!] @derivedFrom(field: "owner")

  claimableDelegationCount: Int!

  claims: [Claim!] @derivedFrom(field: "account")

  gatewayStakes: [GatewayStake!] @derivedFrom(field: "realOwner")
  gateways: [Gateway!] @derivedFrom(field: "realOwner")

  temporaryHolding: TemporaryHoldingData @derivedFrom(field: "account")
  temporaryHoldings: [TemporaryHoldingData!] @derivedFrom(field: "beneficiary")
}

enum TransferDirection {
  FROM
  TO
}

type AccountTransfer @entity {
  id: ID!

  direction: TransferDirection!
  account: Account!
  transfer: Transfer!
}

type Transfer @entity {
  id: ID!

  blockNumber: Int!
  timestamp: DateTime! @index

  from: Account!
  to: Account!

  amount: BigInt!
}

type Contracts {
  router: String
  networkController: String
  staking: String
  workerRegistration: String
  rewardTreasury: String
  distributedRewardsDistribution: String
  gatewayRegistry: String
  rewardCalculation: String
  softCap: String
  vestingFactory: String
  temporaryHoldingFactory: String
}

type Settings @entity {
  id: ID!
  bondAmount: BigInt
  delegationLimitCoefficient: Float!
  epochLength: Int
  minimalWorkerVersion: String
  recommendedWorkerVersion: String
  lockPeriod: Int

  contracts: Contracts!

  currentEpoch: Int
  utilizedStake: BigInt!
  baseApr: Float!
}

enum ClaimType {
  WORKER
  DELEGATION
}

type Claim @entity {
  id: ID!

  blockNumber: Int!
  timestamp: DateTime! @index

  type: ClaimType!

  worker: Worker
  delegation: Delegation
  "worker.realOwner or delegation.realOwner"
  account: Account!

  amount: BigInt!
}

type Commitment @entity {
  id: ID!
  from: DateTime!
  fromBlock: Int!
  to: DateTime!
  toBlock: Int!
  recipients: [CommitmentRecipient!]!
}

type CommitmentRecipient {
  workerId: ID!
  workerReward: BigInt!
  workerApr: Float!
  stakerReward: BigInt!
  stakerApr: Float!
}

type Block @entity {
  id: ID!
  hash: String!
  height: Int! @index
  timestamp: DateTime! @index
  l1BlockNumber: Int! @index
}

enum WorkerStatus {
  REGISTERING
  ACTIVE
  DEREGISTERING
  DEREGISTERED
  WITHDRAWN
  UNKNOWN
}

type WorkerDayUptime {
  timestamp: DateTime!
  uptime: Float!
}

type Worker
  @entity
  @index(fields: ["id", "createdAt", "status"])
  @index(fields: ["id", "realOwner"])
{
  id: ID!

  peerId: String! @index
  owner: Account!
  "owner.owner for VESTING account"
  realOwner: Account!
  bond: BigInt!
  createdAt: DateTime!

  locked: Boolean
  lockStart: Int
  lockEnd: Int

  name: String
  website: String
  email: String
  description: String

  status: WorkerStatus!
  statusHistory: [WorkerStatusChange!]! @derivedFrom(field: "worker")

  claimableReward: BigInt!
  rewards: [WorkerReward!] @derivedFrom(field: "worker")
  claimedReward: BigInt!
  claims: [Claim!] @derivedFrom(field: "worker")

  apr: Float
  stakerApr: Float

  totalDelegation: BigInt!
  capedDelegation: BigInt!
  delegationCount: Int!
  delegations: [Delegation!] @derivedFrom(field: "worker")
  totalDelegationRewards: BigInt!

  # network metrics
  online: Boolean @index
  dialOk: Boolean
  jailed: Boolean
  jailReason: String

  version: String

  storedData: BigInt

  queries24Hours: BigInt
  queries90Days: BigInt

  servedData24Hours: BigInt
  servedData90Days: BigInt

  scannedData24Hours: BigInt
  scannedData90Days: BigInt

  uptime24Hours: Float
  uptime90Days: Float

  trafficWeight: Float
  liveness: Float
  dTenure: Float

  dayUptimes: [WorkerDayUptime!]
  snapshots: [WorkerSnapshot!] @derivedFrom(field: "worker")
}

type WorkerStatusChange @entity {
  worker: Worker!
  status: WorkerStatus!
  timestamp: DateTime
  blockNumber: Int!
  pending: Boolean!
}

type WorkerReward @entity {
  id: ID!

  blockNumber: Int!
  timestamp: DateTime! @index

  worker: Worker!

  amount: BigInt!
  stakersReward: BigInt!
}

type WorkerSnapshot @entity {
  id: ID!
  worker: Worker!
  timestamp: DateTime!
  uptime: Float!
  epoch: Epoch!
}

type Delegation @entity @index(fields: ["id", "realOwner"]) {
  id: ID!

  owner: Account!
  "owner.owner for VESTING account"
  realOwner: Account!
  worker: Worker!

  deposit: BigInt!
  locked: Boolean
  lockStart: Int
  lockEnd: Int

  claimableReward: BigInt!
  rewards: [DelegationReward!] @derivedFrom(field: "delegation")
  claimedReward: BigInt!
  claims: [Claim!] @derivedFrom(field: "delegation")
}

type DelegationReward @entity {
  id: ID!

  blockNumber: Int!
  timestamp: DateTime! @index

  delegation: Delegation!

  amount: BigInt!
}

enum GatewayStatus {
  REGISTERED
  DEREGISTERED
  UNKNOWN
}

type Gateway @entity {
  id: ID!

  createdAt: DateTime!

  owner: Account!
  realOwner: Account!

  stake: GatewayStake!

  status: GatewayStatus!
  statusHistory: [GatewayStatusChange!]! @derivedFrom(field: "gateway")

  name: String
  website: String
  email: String
  description: String
  endpointUrl: String
}

type GatewayStatusChange @entity {
  gateway: Gateway!
  status: GatewayStatus!
  timestamp: DateTime
  blockNumber: Int!
}

type GatewayStake @entity {
  id: ID!

  owner: Account!
  realOwner: Account!

  autoExtension: Boolean!

  gateways: [Gateway!]! @derivedFrom(field: "stake")

  amount: BigInt!

  computationUnits: BigInt!
  computationUnitsPending: BigInt

  locked: Boolean!
  lockStart: Int
  lockEnd: Int
}

enum EpochStatus {
  PLANNED
  STARTED
  ENDED
}

type Epoch @entity {
  id: ID!
  number: Int!
  start: Int!
  startedAt: DateTime
  end: Int!
  endedAt: DateTime
  status: EpochStatus!
  activeWorkerIds: [String!]
}

type TemporaryHoldingData @entity {
  id: ID!

  account: Account! @unique
  beneficiary: Account!
  admin: Account!
  unlockedAt: DateTime!
  locked: Boolean!
}
